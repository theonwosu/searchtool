/**
 * Copyright (c) 2008 by Theo Nwosu. All Rights Reserved.
 *  
 * Theo Nwosu grants you a non-exclusive, royalty free, license to use,
 * modify and redistribute this software in source and binary code form,
 * provided that this copyright notice and license appear on all copies of
 * the software.
 * 
 * This software is provided "AS IS," without a warranty of any kind.
 */
package search;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import matcher.SearchMatcher;
import matcher.MatcherFactory;
import observers.SearchObserver;
import util.Util;
import util.UtilFactory;
import exceptions.SearchException;

/**
 * @author Theophine Nwosu
 * 
 */
public class SearchAgent {
  private static final int RESULT = 0;
  private static final int STATUS = 1;
  private String compressedFile = null;
  private final String TEMP = "temp999";
  private int count = 999111;
  private Map map = new HashMap();
  private boolean first = true;
  private String hold;
  private int level = 0;
  private Map levelMap = new HashMap();
  private List observers = new ArrayList();
  private boolean CANCEL = false;

  /**
   * This method will list all files in a given jar file that matches a search
   * string
   * 
   * @param file
   * @param searchStr
   * @param matcherType
   * @param caseSensitivity
   * @throws Exception
   */
  public void processFile(File file, String searchStr, String javaHome, int matcherType,
      int caseSensitivity) throws SearchException {
    javaHome = UtilFactory.getInstance().getUtil().validateJavaHome(javaHome);    
    if (file == null) {
      throw new SearchException("File to search can't be empty");
    }
    if (searchStr == null || (searchStr = searchStr.trim()).length() < 1) {
      throw new SearchException("File to find can't be empty");
    }
    if (file.isDirectory()) {
      processFiles(file, searchStr, javaHome, matcherType, caseSensitivity);
      return;
    }
    if (CANCEL) {
      return;
    }
    List listOfContentOfJarFile = new ArrayList();
    String fileInJarFile = "";
    String name = file.toString();
    if (name.toLowerCase().endsWith(".jar")) {
      listOfContentOfJarFile = UtilFactory.getInstance().getUtil().getJarFileList(javaHome, name);
      for (int j = 0; j < listOfContentOfJarFile.size(); j++) {
        if (CANCEL) {
          return;
        }
        fileInJarFile = (String) listOfContentOfJarFile.get(j);
        if (matchFile(fileInJarFile, searchStr, matcherType, caseSensitivity)) {
          display3(name, fileInJarFile);
        }
      }
    }
    else if (name.toLowerCase().endsWith(".ear") || name.toLowerCase().endsWith(".zip")
        || name.toLowerCase().endsWith(".war")) {
      processZip(name, javaHome, searchStr, matcherType, caseSensitivity);
    }
  }

  /**
   * This method will recursively search a directory and list all jar files that
   * contain a file matching a given search string
   * 
   * @param directory
   * @param searchStr
   * @param matcherType
   * @param caseSensitivity
   * @throws SearchException
   */
  public void processFiles(File directory, String searchStr, String javaHome,
      int matcherType, int caseSensitivity) throws SearchException {
    
    javaHome = UtilFactory.getInstance().getUtil().validateJavaHome(javaHome);     
    if (directory == null) {
      throw new SearchException("Directory to search can't be empty");
    }
    if (searchStr == null || (searchStr = searchStr.trim()).length() < 1) {
      throw new SearchException("File to find can't be empty");
    }
    if (!directory.isDirectory()) {
      processFile(directory, searchStr, javaHome, matcherType, caseSensitivity);
      return;
    }
    File[] files = directory.listFiles();
    List listOfContentOfJarFile = new ArrayList();
    String fileInJarFile = "";
    for (int i = 0; i < files.length; i++) {
      if (CANCEL) {
        return;
      }
      if (files[i].isDirectory()) {
        processFiles(files[i], searchStr, javaHome, matcherType, caseSensitivity);
      }
      else {
        String name = files[i].toString();
        if (matchFile(name, searchStr, matcherType, caseSensitivity)) {
          if (compressedFile != null) {
            map.put(name, levelMap.get(level + ""));
            display(name, "", searchStr);
          }
          else {
            notifyObservers(name, RESULT);
          }
        }        
        if (name.toLowerCase().endsWith(".jar")) {
          listOfContentOfJarFile = UtilFactory.getInstance().getUtil().getJarFileList(javaHome, name);
          for (int j = 0; j < listOfContentOfJarFile.size(); j++) {
            if (CANCEL) {
              return;
            }
            fileInJarFile = (String) listOfContentOfJarFile.get(j);
            if (matchFile(fileInJarFile, searchStr, matcherType, caseSensitivity)) {
              map.put(name, levelMap.get(level + ""));
              if (compressedFile != null) {
                display(name, fileInJarFile, searchStr);
              }
              else {
                display3(name, fileInJarFile);
              }
            }
          }
        }
        else if (name.toLowerCase().endsWith(".zip")
            || name.toLowerCase().endsWith(".ear") || name.toLowerCase().endsWith(".war")) {
          processZip(name, javaHome, searchStr, matcherType, caseSensitivity);
        }
      }
    }
  }

  /**
   * @param filePath
   * @param searchStr
   * @param matcherType
   * @param caseSensitivity
   * @return
   * @throws SearchException
   */
  private boolean matchFile(String filePath, String searchStr, int matcherType,
      int caseSensitivity) throws SearchException {
    notifyObservers(filePath, STATUS);
    
    if(isDirectory(filePath)){
      return false;
    }
    File file = new File(filePath);
    String name = file.getName();
    SearchMatcher matcher = MatcherFactory.getInstance().getMatcher(matcherType,
        caseSensitivity);
    if (matcher.match(name, searchStr)) {
      return true;
    }
    return false;
  }
  
  private boolean isDirectory(String file){
    if(file != null && (file.endsWith("/") || file.endsWith("\\"))){
      return true;
    }
    return false;
  }

  /**
   * Utility method to format path to file.
   * 
   * @param pathToFile
   * @return
   */
  private String formatPath(String pathToFile) {
    if (pathToFile.trim().length() > 0) {
      String fileSeparator = File.separator;
      if (fileSeparator.equals("\\")) {
        pathToFile = pathToFile.replaceAll("/", "\\\\");
      }
      return File.separator + pathToFile;
    }
    return pathToFile.trim();
  }

 /**
  * This method will display the result of a search operation.
  * It is used when the jar file is not contained in an archive,
  * for example, inside a zip - that is when the value of the compressedFile
  * variable is null. It just appends the full package name to the
  * full path of the jar file 
  * 
  * @param jarName
  * @param pathToFile
  */
  private void display3(String jarName, String pathToFile) {
    String fullPathToFile = jarName;
    String fileSeparator = File.separator;
    if (fileSeparator.equals("\\")) {
      pathToFile = pathToFile.replaceAll("/", "\\\\");
    }
    fullPathToFile = jarName + File.separator + pathToFile;
    notifyObservers(fullPathToFile, RESULT);
  }

  /**
   * This method will display the result of a search operation. It uses a hash
   * map implementation of a link list to get the full archive path containing
   * the search file. It then appends the path to the file if for example the
   * file is contained in a package by a call to formatPath(pathToFile)
   * otherwist it appends an empty string
   * 
   * @param name
   * @param pathToFile
   * @param searchStr
   */
  private void display(String name, String pathToFile, String searchStr) {
    String value = (String) map.get(name);
    String temp = "";
    String temp2 = "";
    String temp3 = null;
    StringBuffer buffer = new StringBuffer();
    while (value != null) {
      if (map.get(value) == null) {
        temp3 = getRelativePathContainingSearchStr(name);
        buffer.append(value).append(temp2).append(temp3).append(formatPath(pathToFile));
        temp = buffer.toString();
      }
      else {
        temp2 = getRelativePathContainingSearchStr(value) + temp2;
      }
      value = (String) map.get(value);
    }
    notifyObservers(temp, RESULT);
  }

  /**
   * Get relative path containing search string, disregard the temporary
   * directory that was created to extract the files
   * 
   * @param name
   * @return
   */
  private String getRelativePathContainingSearchStr(String name) {
    int len = TEMP.length();
    int index = name.indexOf(TEMP);
    // index = index + len;
    if (index < 0 || (index = index + len) >= name.length()) {
      return "";
    }
    // loop until end of temporay directory substring, return the remaining
    // directory path
    while (name.charAt(index) != '/' && name.charAt(index) != '\\') {
      index++;
      if (index >= name.length()) {
        return "";
      }
    }
    String value = name.substring(index);
    return value;
  }

  /**
   * @param name
   * @return
   */
  private String getName(String name) {
    File file = new File(name);
    return file.getName();
  }

  /**
   * @param name
   * @param java_home
   * @param searchStr
   * @param matcherType
   * @param caseSensitivity
   * @throws SearchException
   */
  private void processZip(String name, String java_home, String searchStr,
      int matcherType, int caseSensitivity) throws SearchException {
    if (first) {
      first = false;
      hold = TEMP + count;
      compressedFile = name;
      map.put(name, null);
    }
    else {
      map.put(name, levelMap.get(level + ""));
    }

    String tempDirectory = TEMP + count++;
    new File(tempDirectory).mkdir();
    Util util = UtilFactory.getInstance().getUtil();
    String executable = util.generateExecutable(java_home, name, tempDirectory);
    if (executable != null) {
      level++;
      levelMap.put(level + "", name);
      util.execute(executable);
      File temp2 = new File(System.getProperty("user.dir") + "/" + tempDirectory);
      processFiles(temp2, searchStr, java_home, matcherType, caseSensitivity);
      level--;
      File temp1 = new File(executable);
      temp1.delete();
      cleanUP(temp2);
    }
    // Do not set to null until all contents have been processed
    if (tempDirectory.equals(hold)) {
      compressedFile = null;
      first = true;
      levelMap.clear();
      map.clear();
    }
  }

  /**
   * @param directory
   */
  private void cleanUP(File directory) {
    File[] files = directory.listFiles();
    for (int i = 0; i < files.length; i++) {
      if (files[i].isDirectory()) {
        cleanUP(files[i]);
      }
      files[i].delete();
    }
    directory.delete();
  }

  /**
   * This method will return a list of files in a given directory
   * 
   * @param directory
   * @return
   * @throws SearchException
   */
  public File[] listFiles(File directory) throws SearchException {
    if (directory == null) {
      throw new SearchException(
          "directory parameter passed to listFiles(File directory) method is null");
    }
    if (!directory.isDirectory()) {
      throw new SearchException(
          "File parameter passed to listFiles(File directory) method is not a directory");
    }
    File[] files = directory.listFiles();
    for (int i = 0; i < files.length; i++) {
      System.out.println(files[i]);
    }
    return files;
  }

  /**
   * This method will return a list of files matching a given filter in a given
   * directory
   * 
   * @param directory
   * @param filter
   * @return
   * @throws SearchException
   */
  public ArrayList listFiles(File directory, FileFilter filter) throws SearchException {
    if (directory == null || filter == null) {
      throw new SearchException(
          "directory or filter parameter passed to listFiles(File directory, FileFilter filter) method is null");
    }
    if (!directory.isDirectory()) {
      throw new SearchException(
          "File parameter passed to listFiles(File directory, FileFilter filter) method is not a directory");
    }
    ArrayList list = new ArrayList();
    File[] files = directory.listFiles(filter);
    String fullpath = null;
    for (int i = 0; i < files.length; i++) {
      fullpath = files[i].getAbsolutePath();
      fullpath = fullpath.replaceAll("\\\\", "/");
      list.add(fullpath);
    }
    return list;
  }

  /**
   * This method will list all files in a given jar file that matches a search
   * string
   * 
   * @param searchStr
   * @param matcherType
   * @param caseSensitivity
   * @param dir
   * 
   * @throws SearchException
   */
  public void processFile(String file, String searchStr, String javaHome,
      int matcherType, int caseSensitivity) throws SearchException {
 
    javaHome = UtilFactory.getInstance().getUtil().validateJavaHome(javaHome);     
    if (file == null || (file = file.trim()).length() < 1) {
      throw new SearchException("Search file can't be empty");
    }
    File fileObject = new File(file);
    processFile(fileObject, searchStr, javaHome, matcherType, caseSensitivity);
  }

  /**
   * This method will recursively search a directory and list all jar files that
   * contain a file matching a given search string
   * 
   * @param dir
   * @param searchStr
   * @param matchType
   * @param caseSensitivity
   * @throws SearchException
   */
  public void processFiles(String dir, String searchStr, String javaHome,
      int matcherType, int caseSensitivity) throws SearchException {
    javaHome = UtilFactory.getInstance().getUtil().validateJavaHome(javaHome);     
    if (dir == null || (dir = dir.trim()).length() < 1) {
      throw new SearchException("Search directory can't be empty");
    }
    File directory = new File(dir);
    processFiles(directory, searchStr, javaHome, matcherType, caseSensitivity);
  }


  public void add(SearchObserver observer) {
    observers.add(observer);
  }

  public void cancel() {
    CANCEL = true;
  }

  public void reset() {
    CANCEL = false;
  }

  private void notifyObservers(String value, int type) {
    for (int i = 0; i < observers.size(); i++) {
      SearchObserver observer = (SearchObserver) observers.get(i);
      if (type == RESULT) {
        observer.updateResult(value);
      }
      else if (type == STATUS) {
        String temp = getRelativePathContainingSearchStr(value);
        if ("".equals(temp)) {
          observer.updateStatus("Searching : " + value);
        }
        else {
          observer.updateStatus("Searching : " + temp);
        }
      }
    }
  }

  /**
   * @param args
   * @throws SearchException
   */
  public static void main(String[] args) throws SearchException {
    SearchAgent helper = new SearchAgent();
    System.out.println("Starting search...");
    // File directoryO = new File("C:/bea/weblogic81/server/lib");
    String searchStr = "oracle.security.jazn.login.module.db.DBTableOraDataSourceLoginModule"
        + ".class";
    String directory = "C:/theo-OC4J.10.1.3.1.0";
    String java_home = "C:/bea/8.1.6/bea/jdk142_11";
    // java_home = "C:/j2sdk1.4.2_08";

    directory = "C:/bea/8.1.6";
    // directory = "C:/theo/jboss/4.2.2.GA";
    // directory = "D:/theo/jboss/JBossApplicationServer/binary";
    directory = "C:/delete/hold/delete/WebContent.war";
    searchStr = "gov.nih.ipf.beantier.lookupservice.LookupEntry";
    searchStr = "UsernamePasswordLoginModule.class";
    searchStr = "test.jsp";
    searchStr = "Action.class";
    // searchStr = "DisplayTreeTag.class";
    // searchStr = "FileElement.class";
    // searchStr = "orion-web.xml";
    // searchStr = "HttpServletRequest.class";
    // helper.listJar(directory,searchStr, java_home);
    // helper.listFileJar(directory,searchStr, java_home);
    helper.processFiles(directory, searchStr, java_home, SearchMatcher.EXACT_MATCHER, SearchMatcher.CASE_SENSITIVE);
    helper.processFile(directory, searchStr, java_home, SearchMatcher.EXACT_MATCHER, SearchMatcher.CASE_SENSITIVE);
    System.out.println("Ending search!");
  }
}
